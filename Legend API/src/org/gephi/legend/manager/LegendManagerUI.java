/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.legend.manager;

import java.awt.*;
import java.beans.PropertyEditorManager;
import java.util.ArrayList;
import java.util.Collection;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.graph.api.Graph;
import org.gephi.legend.api.CustomLegendItemBuilder;
import org.gephi.legend.builders.*;
import org.gephi.legend.items.*;
import org.gephi.legend.items.propertyeditors.DescriptionItemElementPropertyEditor;
import org.gephi.preview.api.*;
import org.gephi.preview.spi.PreviewUI;
import org.openide.explorer.propertysheet.PropertySheet;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;

/**
 *
 * @author edubecks
 */
@ServiceProvider(service = PreviewUI.class, position = 404)
public class LegendManagerUI extends javax.swing.JPanel implements PreviewUI {

    private final LegendController legendController;

    /**
     * Creates new form LegendManagerUI
     */
    public LegendManagerUI() {
        legendController = LegendController.getInstance();
        initComponents();
        tooltipRenderer = new ComboboxToolTipRenderer();
        builderTypeComboBox.setRenderer(tooltipRenderer);

        registerEditors();
        registerLegendBuilders();


        numberOfItemsLabel.setVisible(false);
        numberOfItemsTextField.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addLegendButton = new javax.swing.JButton();
        legendItemBuildersComboBox = new javax.swing.JComboBox();
        builderTypeComboBox = new javax.swing.JComboBox();
        legendManagerPanel = new javax.swing.JPanel();
        activeLegendsComboBox = new javax.swing.JComboBox();
        activeLegendLabel = new javax.swing.JLabel();
        legendPropertiesPanel = new javax.swing.JPanel();
        removeLegendButton = new javax.swing.JButton();
        numberOfItemsTextField = new javax.swing.JTextField();
        numberOfItemsLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        addLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.addLegendButton.text")); // NOI18N
        addLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLegendButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        add(addLegendButton, gridBagConstraints);

        legendItemBuildersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                legendItemBuildersComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(legendItemBuildersComboBox, gridBagConstraints);

        builderTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(builderTypeComboBox, gridBagConstraints);

        legendManagerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.legendManagerPanel.border.title"), javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP)); // NOI18N
        legendManagerPanel.setLayout(new java.awt.GridBagLayout());

        activeLegendsComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activeLegendsComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        legendManagerPanel.add(activeLegendsComboBox, gridBagConstraints);

        activeLegendLabel.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.activeLegendLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        legendManagerPanel.add(activeLegendLabel, gridBagConstraints);

        legendPropertiesPanel.setMinimumSize(new java.awt.Dimension(152, 57));
        legendPropertiesPanel.setPreferredSize(new java.awt.Dimension(152, 57));
        legendPropertiesPanel.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        legendManagerPanel.add(legendPropertiesPanel, gridBagConstraints);

        removeLegendButton.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.removeLegendButton.text")); // NOI18N
        removeLegendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLegendButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        legendManagerPanel.add(removeLegendButton, gridBagConstraints);

        numberOfItemsTextField.setColumns(2);
        numberOfItemsTextField.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.numberOfItemsTextField.text")); // NOI18N
        numberOfItemsTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfItemsTextFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        legendManagerPanel.add(numberOfItemsTextField, gridBagConstraints);

        numberOfItemsLabel.setText(org.openide.util.NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.numberOfItemsLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        legendManagerPanel.add(numberOfItemsLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(legendManagerPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void refreshActiveLegendsComboBox() {
        LegendManager legendManager = legendController.getLegendManager();
        Item activeLegendItem = legendManager.getActiveLegendItem();
        activeLegendsComboBox.removeAllItems();
        if (activeLegendItem != null) {
            ArrayList<Item> legendItems = legendManager.getLegendItems();
            for (Item item : legendItems) {
                activeLegendsComboBox.addItem(item);
            }

            activeLegendsComboBox.setSelectedItem(activeLegendItem);
        } else {
            activeLegendsComboBox.setSelectedIndex(-1);
        }

    }

    private void addLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLegendButtonActionPerformed
        Graph graph = null;
        AttributeModel attributeModel = null;

        LegendManager legendManager = legendController.getLegendManager();
        Integer newItemIndex = legendManager.getCurrentIndex();

        LegendItemBuilder builder = (LegendItemBuilder) legendItemBuildersComboBox.getSelectedItem();

        CustomLegendItemBuilder customBuilder = (CustomLegendItemBuilder) builderTypeComboBox.getSelectedItem();
        if (customBuilder.isAvailableToBuild()) {

            Item item = builder.createCustomItem(newItemIndex, graph, attributeModel, customBuilder);

            // adding item to legend manager
            legendController.addItemToLegendManager(item);
            refreshActiveLegendsComboBox();


            // update property sheet
            refreshPropertySheet(item);
        } else {
            JOptionPane.showMessageDialog(
                    this, customBuilder.stepsNeededToBuild(),
                    NbBundle.getMessage(LegendManager.class, "LegendItem.stepsNeededToBuildItem"),
                    JOptionPane.INFORMATION_MESSAGE,
                    null);
        }

    }//GEN-LAST:event_addLegendButtonActionPerformed

    private void refreshPropertySheet(Item activeLegendItem) {
        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);
        PreviewModel previewModel = previewController.getModel();

        // check if previewModel exists
        if (previewModel == null) {
            return;
        }

        legendPropertiesPanel.removeAll();

        if (activeLegendItem != null) {
            PropertySheet propertySheet = new PropertySheet();

            propertySheet.setNodes(new Node[]{new LegendNode(propertySheet, activeLegendItem, previewModel.getProperties())});
            propertySheet.setDescriptionAreaVisible(true);
            legendPropertiesPanel.add(propertySheet, BorderLayout.CENTER);
        }
        legendPropertiesPanel.repaint();
    }

    private void removeLegendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLegendButtonActionPerformed
        // check wheter an element is active or not
        if (activeLegendsComboBox.getSelectedIndex() == -1) {
            return;
        }

        LegendManager legendManager = legendController.getLegendManager();

        Integer activeLegend = ((Item) activeLegendsComboBox.getSelectedItem()).getData(LegendItem.ITEM_INDEX);
        legendManager.removeItem(activeLegend);
        refreshActiveLegendsComboBox();
        refreshPropertySheet(legendManager.getActiveLegendItem());
    }//GEN-LAST:event_removeLegendButtonActionPerformed

    private void activeLegendsComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activeLegendsComboBoxActionPerformed
        Item activeLegendItem = (Item) activeLegendsComboBox.getSelectedItem();

        if (activeLegendItem != null) {
            refreshPropertySheet(activeLegendItem);

            Boolean hasDynamicProperties = activeLegendItem.getData(LegendItem.HAS_DYNAMIC_PROPERTIES);
            numberOfItemsLabel.setVisible(hasDynamicProperties);
            numberOfItemsTextField.setVisible(hasDynamicProperties);

            if (hasDynamicProperties) {
                numberOfItemsTextField.setText(activeLegendItem.getData(LegendItem.NUMBER_OF_DYNAMIC_PROPERTIES).toString());
            }
        } else {
            refreshPropertySheet(null);
        }


    }//GEN-LAST:event_activeLegendsComboBoxActionPerformed

    private void numberOfItemsTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfItemsTextFieldActionPerformed
        PreviewController previewController = Lookup.getDefault().lookup(PreviewController.class);

        if (!numberOfItemsTextField.getText().isEmpty()) {

            int numberOfItems = Integer.parseInt(numberOfItemsTextField.getText());
            Item item = (Item) activeLegendsComboBox.getSelectedItem();
            if (LegendItemBuilder.updatePreviewProperty(item, numberOfItems)) {
                PreviewProperty[] dynamicProperties = item.getData(LegendItem.DYNAMIC_PROPERTIES);
                for (PreviewProperty property : dynamicProperties) {
                    previewController.getModel().getProperties().putValue(property.getName(), property.getValue());
                }
                refreshPropertySheet(item);
            }
        }
    }//GEN-LAST:event_numberOfItemsTextFieldActionPerformed

    private void legendItemBuildersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_legendItemBuildersComboBoxActionPerformed

        // clean combobox
        System.out.println("@Var: tooltipRenderer: " + tooltipRenderer);
        builderTypeComboBox.removeAllItems();
        ArrayList<String> tooltips = new ArrayList<String>();

        LegendItemBuilder builder = (LegendItemBuilder) legendItemBuildersComboBox.getSelectedItem();
        ArrayList<CustomLegendItemBuilder> availableBuilders = builder.getAvailableBuilders();
        for (CustomLegendItemBuilder availableBuilder : availableBuilders) {
            builderTypeComboBox.addItem(availableBuilder);
            tooltips.add(availableBuilder.getDescription());
        }

        tooltipRenderer.setTooltips(tooltips);

    }//GEN-LAST:event_legendItemBuildersComboBoxActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel activeLegendLabel;
    private javax.swing.JComboBox activeLegendsComboBox;
    private javax.swing.JButton addLegendButton;
    private javax.swing.JComboBox builderTypeComboBox;
    private javax.swing.JComboBox legendItemBuildersComboBox;
    private javax.swing.JPanel legendManagerPanel;
    private javax.swing.JPanel legendPropertiesPanel;
    private javax.swing.JLabel numberOfItemsLabel;
    private javax.swing.JTextField numberOfItemsTextField;
    private javax.swing.JButton removeLegendButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setup(PreviewModel previewModel) {
    }

    @Override
    public JPanel getPanel() {
        refreshActiveLegendsComboBox();
        return this;
    }

    @Override
    public void unsetup() {
    }

    @Override
    public Icon getIcon() {
        return new ImageIcon();
    }

    @Override
    public String getPanelTitle() {
        return NbBundle.getMessage(LegendManagerUI.class, "LegendManagerUI.title");
    }

    public final void registerEditors() {
        PropertyEditorManager.registerEditor(DescriptionItemElement.class, DescriptionItemElementPropertyEditor.class);
    }

    private void registerLegendBuilders() {
        Collection<? extends LegendItemBuilder> availablebuilders = legendController.getAvailablebuilders();
        // cleaning combobox
        legendItemBuildersComboBox.removeAllItems();

        // registering builders
        for (LegendItemBuilder legendItemBuilder : availablebuilders) {
            legendItemBuildersComboBox.addItem(legendItemBuilder);
        }
    }

    public class ComboboxToolTipRenderer extends DefaultListCellRenderer {

        private ArrayList<String> tooltips;

        @Override
        public Component getListCellRendererComponent(JList list, Object value,
                int index, boolean isSelected, boolean cellHasFocus) {

            JComponent comp = (JComponent) super.getListCellRendererComponent(list,
                    value, index, isSelected, cellHasFocus);

            if (-1 < index && null != value && null != tooltips) {
                list.setToolTipText(tooltips.get(index));
            }
            return comp;
        }

        public void setTooltips(ArrayList<String> tooltips) {
            this.tooltips = tooltips;
        }
    }
    private ComboboxToolTipRenderer tooltipRenderer;
}
