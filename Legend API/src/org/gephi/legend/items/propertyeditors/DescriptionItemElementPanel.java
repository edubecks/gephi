/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gephi.legend.items.propertyeditors;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.Collection;
import org.gephi.legend.api.DescriptionItemElementValue;
import org.gephi.legend.items.DescriptionItemElement;
import org.openide.util.Lookup;

/**
 *
 * @author edubecks
 */
public class DescriptionItemElementPanel extends javax.swing.JPanel implements ItemListener {

    /**
     * Creates new form DescriptionItemElementPanel
     */
    public DescriptionItemElementPanel() {
        initComponents();
        loadDescriptionItemElementValues();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        valueLabel = new javax.swing.JLabel();
        valueComboBox = new javax.swing.JComboBox();
        customValueTextField = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(400, 100));
        setLayout(new java.awt.GridBagLayout());

        valueLabel.setText(org.openide.util.NbBundle.getMessage(DescriptionItemElementPanel.class, "DescriptionItemElementPanel.valueLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(valueLabel, gridBagConstraints);

        valueComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(valueComboBox, gridBagConstraints);

        customValueTextField.setColumns(20);
        customValueTextField.setText(org.openide.util.NbBundle.getMessage(DescriptionItemElementPanel.class, "DescriptionItemElementPanel.customValueTextField.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        add(customValueTextField, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void valueComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueComboBoxActionPerformed

        DescriptionItemElementValue descriptionItemElementValue = (DescriptionItemElementValue) valueComboBox.getSelectedItem();
        String value = descriptionItemElementValue.getValue();
        customValueTextField.setText(value);
        if (propertyEditor != null) {
            this.propertyEditor.setValue(new DescriptionItemElement(descriptionItemElementValue, value));
        }

    }//GEN-LAST:event_valueComboBoxActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField customValueTextField;
    private javax.swing.JComboBox valueComboBox;
    private javax.swing.JLabel valueLabel;
    // End of variables declaration//GEN-END:variables
    private DescriptionItemElementPropertyEditor propertyEditor;

    public void setup(DescriptionItemElementPropertyEditor propertyEditor) {
        this.propertyEditor = propertyEditor;
        DescriptionItemElement descriptionItemElement = (DescriptionItemElement) propertyEditor.getValue();
        valueComboBox.setSelectedItem(descriptionItemElement.getGenerator());
        customValueTextField.setText(descriptionItemElement.getValue());
    }

    @Override
    public void itemStateChanged(ItemEvent ie) {
    }

    public final void loadDescriptionItemElementValues() {
        Collection<? extends DescriptionItemElementValue> values = Lookup.getDefault().lookupAll(DescriptionItemElementValue.class);
        for (DescriptionItemElementValue descriptionItemElementValue : values) {
            valueComboBox.addItem(descriptionItemElementValue);
        }
        
        // load default value
    }

}
